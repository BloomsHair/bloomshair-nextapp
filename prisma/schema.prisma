generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

type OrdersOrderItems {
  id      String @map("_id") @db.ObjectId
  image   String
  name    String
  price   Float
  product String @db.ObjectId
  qty     Int
}

type OrdersPaymentResult {
  email_address String
  id            String
  status        String
  orderId      String
  update_time   String
}

type OrdersShippingAddress {
  address        String
  city           String
  country        String
  deliveryMethod String?
  postalCode     String
}

type ProductsReviews {
  id        String   @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  name      String
  rating    Float
  updatedAt DateTime @default(now())
  user      String   @db.ObjectId
}

type UsersShippingAddress {
  address    String
  city       String
  country    String
  postalCode String
}

model Order {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime              @default(now())
  deliveredAt     DateTime?             @db.Date
  isDelivered     Boolean              @default(false)
  isPaid          Boolean               @default(false)
  itemsPrice      Float
  orderItems      OrdersOrderItems[]
  paidAt          DateTime              @db.Date
  paymentMethod   String
  paymentResult   OrdersPaymentResult
  shippingAddress OrdersShippingAddress
  shippingPrice   Float
  taxPrice        Float
  totalPrice      Float
  updatedAt       DateTime              @updatedAt
  userId            String                @db.ObjectId @unique
  user User @relation(fields: [userId], references: [id])

  @@map("orders")
}

model Picture {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  image     String
  adminId      String   @db.ObjectId
  admin      User @relation(fields: [adminId], references: [id])
  updatedAt DateTime @updatedAt

  @@map("pictures")
}

model Product {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  brand        String
  category     String
  countInStock Int
  createdAt    DateTime          @default(now())
  description  String
  image        String
  name         String
  numReviews   Int?              @default(0)
  price        Float
  rating       Float?            @default(0)
  reviews      ProductsReviews[]
  slug         String?           @unique
  updatedAt    DateTime          @updatedAt
  userId       String            @db.ObjectId 
  user User @relation(fields: [userId], references: [id])

  @@map("products")
}

model Service {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  category  Category @default(Gents_Hair)
  createdAt DateTime @default(now())
  createdBy String   @db.ObjectId @unique
  user      User @relation(fields: [createdBy], references: [id])
  name      String @unique
  price     Float
  updatedAt DateTime @updatedAt

  @@map("services")
}

model Token {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId      String @db.ObjectId @unique
  user      User @relation(fields: [userId], references: [id])
  type      String @unique
  token     String @unique

  @@map("tokens")
}

model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  category          UserCategory    @default(Customer)
  email             String          @unique
  isEmailVerified   Boolean         @default(false)
  emailVerified     DateTime?       @db.Date
  image             String
  isAdmin           Boolean         @default(false)
  name              String
  password          String?
  shippingAddress   UsersShippingAddress?
  services          Service?
  tokens            Token?
  orders            Order[]
  picture           Picture[]
  products          Product[]
  refresh_token     String?         @db.String
  access_token      String?         @db.String
  id_token          String?         @db.String
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("users")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId 
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String  @db.ObjectId @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserCategory {
  Customer
  Admin
  SuperAdmin
}

enum Category {
  Gents_Hair
  Ladies_Hair
  Technical
  Hair_Treatments
}