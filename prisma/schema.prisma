generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

type OrdersOrderItems {
  id      String @map("_id") @db.ObjectId
  image   String
  name    String
  price   Float
  product String @db.ObjectId
  qty     Int
}

type OrdersPaymentResult {
  email_address String
  id            String
  status        String
  orderId      String
  update_time   String
}

type OrdersShippingAddress {
  address        String
  city           String
  country        String
  deliveryMethod String?
  postalCode     String
}

type ProductsReviews {
  id        String   @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  name      String
  rating    Float
  updatedAt DateTime @default(now())
  user      String   @db.ObjectId
}

type UsersShippingAddress {
  address    String
  city       String
  country    String
  postalCode String
}

model orders {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime              @default(now())
  deliveredAt     DateTime?             @db.Date
  isDelivered     Boolean              @default(false)
  isPaid          Boolean               @default(false)
  itemsPrice      Float
  orderItems      OrdersOrderItems[]
  paidAt          DateTime              @db.Date
  paymentMethod   String
  paymentResult   OrdersPaymentResult
  shippingAddress OrdersShippingAddress
  shippingPrice   Float
  taxPrice        Float
  totalPrice      Float
  updatedAt       DateTime              @updatedAt
  userId            String                @db.ObjectId
  user users @relation(fields: [userId], references: [id])
}

model pictures {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  image     String
  adminId      String   @db.ObjectId @unique
  admin      users @relation(fields: [adminId], references: [id])
  updatedAt DateTime @updatedAt
}

model products {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  brand        String
  category     String
  countInStock Int
  createdAt    DateTime          @default(now())
  description  String
  image        String
  name         String
  numReviews   Int
  price        Float
  rating       Float?
  reviews      ProductsReviews[]
  slug         String? @unique
  updatedAt    DateTime          @updatedAt
  userId         String            @db.ObjectId @unique
  user users @relation(fields: [userId], references: [id])
}

model services {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  category  Category @default(Gents_Hair)
  createdAt DateTime @default(now())
  createdBy String   @db.ObjectId @unique
  user      users @relation(fields: [createdBy], references: [id])
  name      String @unique
  price     Float
  updatedAt DateTime @updatedAt
}

model tokens {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId      String @db.ObjectId @unique
  user      users @relation(fields: [userId], references: [id])
  type      String @unique
  token     String @unique
}

model users {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  category        String
  email           String                @unique
  emailVerified   Boolean @default(false)
  image           String
  isAdmin         Boolean @default(false)
  name            String
  password        String
  shippingAddress UsersShippingAddress?
  services        services?
  tokens          tokens?
  orders          orders[]
  picture         pictures?
  products        products?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}

enum Category {
  Gents_Hair
  Ladies_Hair
  Technical
  Hair_Treatments
}